// Code generated by protoc-gen-isle-rpc. DO NOT EDIT.
//
// Source: resources.proto

package guestapi

import (
	context "context"
	errors "errors"
	pbstream "github.com/lab47/isle/pkg/pbstream"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = pbstream.IsAtLeastVersion0_1_0

const (
	// ResourceAPIName is the fully-qualified name of the ResourceAPI service.
	ResourceAPIName = "dev.lab47.isle.guestapi.ResourceAPI"
)

// PBSResourceAPIClient is a client for the dev.lab47.isle.guestapi.ResourceAPI service.
type PBSResourceAPIClient interface {
	Create(context.Context, *pbstream.Request[CreateResourceReq]) (*pbstream.Response[CreateResourceResp], error)
	Update(context.Context, *pbstream.Request[UpdateResourceReq]) (*pbstream.Response[UpdateResourceResp], error)
	Read(context.Context, *pbstream.Request[ReadResourceReq]) (*pbstream.Response[ReadResourceResp], error)
	CheckProvision(context.Context, *pbstream.Request[CheckProvisionReq]) (*pbstream.Response[CheckProvisionResp], error)
	Delete(context.Context, *pbstream.Request[DeleteResourceReq]) (*pbstream.Response[DeleteResourceResp], error)
}

// PBSNewResourceAPIClient constructs a client for the dev.lab47.isle.guestapi.ResourceAPI service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func PBSNewResourceAPIClient(client pbstream.Client, opts ...pbstream.ClientOption) PBSResourceAPIClient {
	return &pBSResourceAPIClient{
		create: pbstream.NewEndpoint[CreateResourceReq, CreateResourceResp](
			client,
			"/dev.lab47.isle.guestapi.ResourceAPI/Create",
		),
		update: pbstream.NewEndpoint[UpdateResourceReq, UpdateResourceResp](
			client,
			"/dev.lab47.isle.guestapi.ResourceAPI/Update",
		),
		read: pbstream.NewEndpoint[ReadResourceReq, ReadResourceResp](
			client,
			"/dev.lab47.isle.guestapi.ResourceAPI/Read",
		),
		checkProvision: pbstream.NewEndpoint[CheckProvisionReq, CheckProvisionResp](
			client,
			"/dev.lab47.isle.guestapi.ResourceAPI/CheckProvision",
		),
		delete: pbstream.NewEndpoint[DeleteResourceReq, DeleteResourceResp](
			client,
			"/dev.lab47.isle.guestapi.ResourceAPI/Delete",
		),
	}
}

// pBSResourceAPIClient implements PBSResourceAPIClient.
type pBSResourceAPIClient struct {
	create         *pbstream.Endpoint[CreateResourceReq, CreateResourceResp]
	update         *pbstream.Endpoint[UpdateResourceReq, UpdateResourceResp]
	read           *pbstream.Endpoint[ReadResourceReq, ReadResourceResp]
	checkProvision *pbstream.Endpoint[CheckProvisionReq, CheckProvisionResp]
	delete         *pbstream.Endpoint[DeleteResourceReq, DeleteResourceResp]
}

// Create calls dev.lab47.isle.guestapi.ResourceAPI.Create.
func (c *pBSResourceAPIClient) Create(ctx context.Context, req *pbstream.Request[CreateResourceReq]) (*pbstream.Response[CreateResourceResp], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls dev.lab47.isle.guestapi.ResourceAPI.Update.
func (c *pBSResourceAPIClient) Update(ctx context.Context, req *pbstream.Request[UpdateResourceReq]) (*pbstream.Response[UpdateResourceResp], error) {
	return c.update.CallUnary(ctx, req)
}

// Read calls dev.lab47.isle.guestapi.ResourceAPI.Read.
func (c *pBSResourceAPIClient) Read(ctx context.Context, req *pbstream.Request[ReadResourceReq]) (*pbstream.Response[ReadResourceResp], error) {
	return c.read.CallUnary(ctx, req)
}

// CheckProvision calls dev.lab47.isle.guestapi.ResourceAPI.CheckProvision.
func (c *pBSResourceAPIClient) CheckProvision(ctx context.Context, req *pbstream.Request[CheckProvisionReq]) (*pbstream.Response[CheckProvisionResp], error) {
	return c.checkProvision.CallUnary(ctx, req)
}

// Delete calls dev.lab47.isle.guestapi.ResourceAPI.Delete.
func (c *pBSResourceAPIClient) Delete(ctx context.Context, req *pbstream.Request[DeleteResourceReq]) (*pbstream.Response[DeleteResourceResp], error) {
	return c.delete.CallUnary(ctx, req)
}

// PBSResourceAPIHandler is an implementation of the dev.lab47.isle.guestapi.ResourceAPI service.
type PBSResourceAPIHandler interface {
	Create(context.Context, *pbstream.Request[CreateResourceReq]) (*pbstream.Response[CreateResourceResp], error)
	Update(context.Context, *pbstream.Request[UpdateResourceReq]) (*pbstream.Response[UpdateResourceResp], error)
	Read(context.Context, *pbstream.Request[ReadResourceReq]) (*pbstream.Response[ReadResourceResp], error)
	CheckProvision(context.Context, *pbstream.Request[CheckProvisionReq]) (*pbstream.Response[CheckProvisionResp], error)
	Delete(context.Context, *pbstream.Request[DeleteResourceReq]) (*pbstream.Response[DeleteResourceResp], error)
}

// PBSNewResourceAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func PBSNewResourceAPIHandler(svc PBSResourceAPIHandler, opts ...pbstream.HandlerOption) (string, pbstream.Handler) {
	mux := pbstream.NewMux()
	mux.Handle("/dev.lab47.isle.guestapi.ResourceAPI/Create", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ResourceAPI/Create",
		svc.Create,
	))
	mux.Handle("/dev.lab47.isle.guestapi.ResourceAPI/Update", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ResourceAPI/Update",
		svc.Update,
	))
	mux.Handle("/dev.lab47.isle.guestapi.ResourceAPI/Read", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ResourceAPI/Read",
		svc.Read,
	))
	mux.Handle("/dev.lab47.isle.guestapi.ResourceAPI/CheckProvision", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ResourceAPI/CheckProvision",
		svc.CheckProvision,
	))
	mux.Handle("/dev.lab47.isle.guestapi.ResourceAPI/Delete", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ResourceAPI/Delete",
		svc.Delete,
	))
	return "/dev.lab47.isle.guestapi.ResourceAPI/", mux
}

// PBSUnimplementedResourceAPIHandler returns CodeUnimplemented from all methods.
type PBSUnimplementedResourceAPIHandler struct{}

func (PBSUnimplementedResourceAPIHandler) Create(context.Context, *pbstream.Request[CreateResourceReq]) (*pbstream.Response[CreateResourceResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ResourceAPI.Create is not implemented"))
}

func (PBSUnimplementedResourceAPIHandler) Update(context.Context, *pbstream.Request[UpdateResourceReq]) (*pbstream.Response[UpdateResourceResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ResourceAPI.Update is not implemented"))
}

func (PBSUnimplementedResourceAPIHandler) Read(context.Context, *pbstream.Request[ReadResourceReq]) (*pbstream.Response[ReadResourceResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ResourceAPI.Read is not implemented"))
}

func (PBSUnimplementedResourceAPIHandler) CheckProvision(context.Context, *pbstream.Request[CheckProvisionReq]) (*pbstream.Response[CheckProvisionResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ResourceAPI.CheckProvision is not implemented"))
}

func (PBSUnimplementedResourceAPIHandler) Delete(context.Context, *pbstream.Request[DeleteResourceReq]) (*pbstream.Response[DeleteResourceResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ResourceAPI.Delete is not implemented"))
}
