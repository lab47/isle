// Code generated by protoc-gen-isle-rpc. DO NOT EDIT.
//
// Source: shell.proto

package guestapi

import (
	context "context"
	errors "errors"
	pbstream "github.com/lab47/isle/pkg/pbstream"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = pbstream.IsAtLeastVersion0_1_0

const (
	// ShellAPIName is the fully-qualified name of the ShellAPI service.
	ShellAPIName = "dev.lab47.isle.guestapi.ShellAPI"
)

// PBSShellAPIClient is a client for the dev.lab47.isle.guestapi.ShellAPI service.
type PBSShellAPIClient interface {
	ListShellSessions(context.Context, *pbstream.Request[Empty]) (*pbstream.Response[ListShellSessionsResp], error)
	RemoveShellSession(context.Context, *pbstream.Request[RemoveShellSessionReq]) (*pbstream.Response[RemoveShellSessionResp], error)
}

// PBSNewShellAPIClient constructs a client for the dev.lab47.isle.guestapi.ShellAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func PBSNewShellAPIClient(client pbstream.Client, opts ...pbstream.ClientOption) PBSShellAPIClient {
	return &pBSShellAPIClient{
		listShellSessions: pbstream.NewEndpoint[Empty, ListShellSessionsResp](
			client,
			"/dev.lab47.isle.guestapi.ShellAPI/ListShellSessions",
		),
		removeShellSession: pbstream.NewEndpoint[RemoveShellSessionReq, RemoveShellSessionResp](
			client,
			"/dev.lab47.isle.guestapi.ShellAPI/RemoveShellSession",
		),
	}
}

// pBSShellAPIClient implements PBSShellAPIClient.
type pBSShellAPIClient struct {
	listShellSessions  *pbstream.Endpoint[Empty, ListShellSessionsResp]
	removeShellSession *pbstream.Endpoint[RemoveShellSessionReq, RemoveShellSessionResp]
}

// ListShellSessions calls dev.lab47.isle.guestapi.ShellAPI.ListShellSessions.
func (c *pBSShellAPIClient) ListShellSessions(ctx context.Context, req *pbstream.Request[Empty]) (*pbstream.Response[ListShellSessionsResp], error) {
	return c.listShellSessions.CallUnary(ctx, req)
}

// RemoveShellSession calls dev.lab47.isle.guestapi.ShellAPI.RemoveShellSession.
func (c *pBSShellAPIClient) RemoveShellSession(ctx context.Context, req *pbstream.Request[RemoveShellSessionReq]) (*pbstream.Response[RemoveShellSessionResp], error) {
	return c.removeShellSession.CallUnary(ctx, req)
}

// PBSShellAPIHandler is an implementation of the dev.lab47.isle.guestapi.ShellAPI service.
type PBSShellAPIHandler interface {
	ListShellSessions(context.Context, *pbstream.Request[Empty]) (*pbstream.Response[ListShellSessionsResp], error)
	RemoveShellSession(context.Context, *pbstream.Request[RemoveShellSessionReq]) (*pbstream.Response[RemoveShellSessionResp], error)
}

// PBSNewShellAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func PBSNewShellAPIHandler(svc PBSShellAPIHandler, opts ...pbstream.HandlerOption) (string, pbstream.Handler) {
	mux := pbstream.NewMux()
	mux.Handle("/dev.lab47.isle.guestapi.ShellAPI/ListShellSessions", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ShellAPI/ListShellSessions",
		svc.ListShellSessions,
	))
	mux.Handle("/dev.lab47.isle.guestapi.ShellAPI/RemoveShellSession", pbstream.NewUnaryHandler(
		"/dev.lab47.isle.guestapi.ShellAPI/RemoveShellSession",
		svc.RemoveShellSession,
	))
	return "/dev.lab47.isle.guestapi.ShellAPI/", mux
}

// PBSUnimplementedShellAPIHandler returns CodeUnimplemented from all methods.
type PBSUnimplementedShellAPIHandler struct{}

func (PBSUnimplementedShellAPIHandler) ListShellSessions(context.Context, *pbstream.Request[Empty]) (*pbstream.Response[ListShellSessionsResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ShellAPI.ListShellSessions is not implemented"))
}

func (PBSUnimplementedShellAPIHandler) RemoveShellSession(context.Context, *pbstream.Request[RemoveShellSessionReq]) (*pbstream.Response[RemoveShellSessionResp], error) {
	return nil, pbstream.NewError(pbstream.CodeUnimplemented, errors.New("dev.lab47.isle.guestapi.ShellAPI.RemoveShellSession is not implemented"))
}
