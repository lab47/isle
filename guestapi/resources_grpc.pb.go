// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: resources.proto

package guestapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceAPIClient is the client API for ResourceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceAPIClient interface {
	Create(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceResp, error)
	Update(ctx context.Context, in *UpdateResourceReq, opts ...grpc.CallOption) (*UpdateResourceResp, error)
	Read(ctx context.Context, in *ReadResourceReq, opts ...grpc.CallOption) (*ReadResourceResp, error)
	CheckProvision(ctx context.Context, in *CheckProvisionReq, opts ...grpc.CallOption) (*CheckProvisionResp, error)
	Delete(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceResp, error)
	List(ctx context.Context, in *ListResourcesReq, opts ...grpc.CallOption) (*ListResourcesResp, error)
}

type resourceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceAPIClient(cc grpc.ClientConnInterface) ResourceAPIClient {
	return &resourceAPIClient{cc}
}

func (c *resourceAPIClient) Create(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceResp, error) {
	out := new(CreateResourceResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) Update(ctx context.Context, in *UpdateResourceReq, opts ...grpc.CallOption) (*UpdateResourceResp, error) {
	out := new(UpdateResourceResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) Read(ctx context.Context, in *ReadResourceReq, opts ...grpc.CallOption) (*ReadResourceResp, error) {
	out := new(ReadResourceResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) CheckProvision(ctx context.Context, in *CheckProvisionReq, opts ...grpc.CallOption) (*CheckProvisionResp, error) {
	out := new(CheckProvisionResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/CheckProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) Delete(ctx context.Context, in *DeleteResourceReq, opts ...grpc.CallOption) (*DeleteResourceResp, error) {
	out := new(DeleteResourceResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAPIClient) List(ctx context.Context, in *ListResourcesReq, opts ...grpc.CallOption) (*ListResourcesResp, error) {
	out := new(ListResourcesResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ResourceAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceAPIServer is the server API for ResourceAPI service.
// All implementations must embed UnimplementedResourceAPIServer
// for forward compatibility
type ResourceAPIServer interface {
	Create(context.Context, *CreateResourceReq) (*CreateResourceResp, error)
	Update(context.Context, *UpdateResourceReq) (*UpdateResourceResp, error)
	Read(context.Context, *ReadResourceReq) (*ReadResourceResp, error)
	CheckProvision(context.Context, *CheckProvisionReq) (*CheckProvisionResp, error)
	Delete(context.Context, *DeleteResourceReq) (*DeleteResourceResp, error)
	List(context.Context, *ListResourcesReq) (*ListResourcesResp, error)
	mustEmbedUnimplementedResourceAPIServer()
}

// UnimplementedResourceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedResourceAPIServer struct {
}

func (UnimplementedResourceAPIServer) Create(context.Context, *CreateResourceReq) (*CreateResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceAPIServer) Update(context.Context, *UpdateResourceReq) (*UpdateResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceAPIServer) Read(context.Context, *ReadResourceReq) (*ReadResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedResourceAPIServer) CheckProvision(context.Context, *CheckProvisionReq) (*CheckProvisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProvision not implemented")
}
func (UnimplementedResourceAPIServer) Delete(context.Context, *DeleteResourceReq) (*DeleteResourceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourceAPIServer) List(context.Context, *ListResourcesReq) (*ListResourcesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceAPIServer) mustEmbedUnimplementedResourceAPIServer() {}

// UnsafeResourceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceAPIServer will
// result in compilation errors.
type UnsafeResourceAPIServer interface {
	mustEmbedUnimplementedResourceAPIServer()
}

func RegisterResourceAPIServer(s grpc.ServiceRegistrar, srv ResourceAPIServer) {
	s.RegisterService(&ResourceAPI_ServiceDesc, srv)
}

func _ResourceAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).Create(ctx, req.(*CreateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).Update(ctx, req.(*UpdateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).Read(ctx, req.(*ReadResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_CheckProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProvisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).CheckProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/CheckProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).CheckProvision(ctx, req.(*CheckProvisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).Delete(ctx, req.(*DeleteResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ResourceAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAPIServer).List(ctx, req.(*ListResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceAPI_ServiceDesc is the grpc.ServiceDesc for ResourceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.lab47.isle.guestapi.ResourceAPI",
	HandlerType: (*ResourceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourceAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceAPI_Update_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ResourceAPI_Read_Handler,
		},
		{
			MethodName: "CheckProvision",
			Handler:    _ResourceAPI_CheckProvision_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceAPI_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ResourceAPI_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources.proto",
}
