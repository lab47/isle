syntax = "proto3";

package dev.lab47.isle.guestapi;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

import "labels.proto";

option go_package = "lab47.dev/isle/guestapi";

message IPAddress {
  bytes address = 1;
  int32 mask = 2;
}

message NetworkInfo {
  repeated IPAddress addresses = 1;
  repeated int32 ports = 2;
}

message ContainerInfo {
  string id = 1;
  int32 init_pid = 2;
  string node_id = 3;

  string image = 4;
  repeated string command = 5;

  google.protobuf.Timestamp started_at = 6;
}

message ProvisionStatus {
  Status status = 1;
  NetworkInfo network_info = 2;
  ContainerInfo container_info = 3;
  string last_error = 4;
  ResourceId container_ref = 5;
  string status_details = 6;

  enum Status {
    UNKNOWN = 0;
    ADDING = 1;
    RUNNING = 2;
    SUSPENDED = 3;
    STOPPED = 4;
    DEAD = 5;
  }
}

message ResourceId {
  string category = 1;
  string type = 2;
  bytes unique_id = 3;
}

message ResourceIndexKey {
  string category = 1;
  string type = 2;
  int32 field = 3;
  google.protobuf.Value value = 4;
  bytes unique_id = 5;
}

message Resource {
  ResourceId id = 1;
  google.protobuf.Any resource = 2;
  ProvisionStatus provision_status = 3;
  Labels labels = 4;
}

message CreateResourceReq {
  google.protobuf.Any resource = 1;
}

message CreateResourceResp {
  Resource resource = 1;
}

message UpdateResourceReq {
  Resource resource = 1;
}

message UpdateResourceResp {
  Resource resource = 1;
}

message ReadResourceReq {
  ResourceId id = 1;
}

message ReadResourceResp {
  Resource resource = 1;
}

message CheckProvisionReq {
  ResourceId id = 1;
}

message CheckProvisionResp {
  ProvisionStatus status = 1;
}

message DeleteResourceReq {
  ResourceId id = 1;
}

message DeleteResourceResp {
  Resource resource = 1;
}

message ListResourcesReq {
  oneof criteria {
    Type type = 1;
    Labels labels = 2;
  }

  message Type {
    string category = 1;
    string type = 2;
  }
}

message ListResourcesResp {
  repeated ResourceId ids = 1;
}

service ResourceAPI {
  rpc Create(CreateResourceReq) returns (CreateResourceResp);
  rpc Update(UpdateResourceReq) returns (UpdateResourceResp);
  rpc Read(ReadResourceReq) returns (ReadResourceResp);
  rpc CheckProvision(CheckProvisionReq) returns (CheckProvisionResp);
  rpc Delete(DeleteResourceReq) returns (DeleteResourceResp);
  rpc List(ListResourcesReq) returns (ListResourcesResp);
}
