// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: shell.proto

package guestapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShellAPIClient is the client API for ShellAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellAPIClient interface {
	ListShellSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListShellSessionsResp, error)
	RemoveShellSession(ctx context.Context, in *RemoveShellSessionReq, opts ...grpc.CallOption) (*RemoveShellSessionResp, error)
}

type shellAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewShellAPIClient(cc grpc.ClientConnInterface) ShellAPIClient {
	return &shellAPIClient{cc}
}

func (c *shellAPIClient) ListShellSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListShellSessionsResp, error) {
	out := new(ListShellSessionsResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ShellAPI/ListShellSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellAPIClient) RemoveShellSession(ctx context.Context, in *RemoveShellSessionReq, opts ...grpc.CallOption) (*RemoveShellSessionResp, error) {
	out := new(RemoveShellSessionResp)
	err := c.cc.Invoke(ctx, "/dev.lab47.isle.guestapi.ShellAPI/RemoveShellSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellAPIServer is the server API for ShellAPI service.
// All implementations must embed UnimplementedShellAPIServer
// for forward compatibility
type ShellAPIServer interface {
	ListShellSessions(context.Context, *Empty) (*ListShellSessionsResp, error)
	RemoveShellSession(context.Context, *RemoveShellSessionReq) (*RemoveShellSessionResp, error)
	mustEmbedUnimplementedShellAPIServer()
}

// UnimplementedShellAPIServer must be embedded to have forward compatible implementations.
type UnimplementedShellAPIServer struct {
}

func (UnimplementedShellAPIServer) ListShellSessions(context.Context, *Empty) (*ListShellSessionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShellSessions not implemented")
}
func (UnimplementedShellAPIServer) RemoveShellSession(context.Context, *RemoveShellSessionReq) (*RemoveShellSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShellSession not implemented")
}
func (UnimplementedShellAPIServer) mustEmbedUnimplementedShellAPIServer() {}

// UnsafeShellAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellAPIServer will
// result in compilation errors.
type UnsafeShellAPIServer interface {
	mustEmbedUnimplementedShellAPIServer()
}

func RegisterShellAPIServer(s grpc.ServiceRegistrar, srv ShellAPIServer) {
	s.RegisterService(&ShellAPI_ServiceDesc, srv)
}

func _ShellAPI_ListShellSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellAPIServer).ListShellSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ShellAPI/ListShellSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellAPIServer).ListShellSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShellAPI_RemoveShellSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShellSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellAPIServer).RemoveShellSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.lab47.isle.guestapi.ShellAPI/RemoveShellSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellAPIServer).RemoveShellSession(ctx, req.(*RemoveShellSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellAPI_ServiceDesc is the grpc.ServiceDesc for ShellAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.lab47.isle.guestapi.ShellAPI",
	HandlerType: (*ShellAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShellSessions",
			Handler:    _ShellAPI_ListShellSessions_Handler,
		},
		{
			MethodName: "RemoveShellSession",
			Handler:    _ShellAPI_RemoveShellSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shell.proto",
}
