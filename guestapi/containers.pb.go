// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: containers.proto

package guestapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Uid      int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid      int32  `protobuf:"varint,3,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *User) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

type Bind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPath      string   `protobuf:"bytes,1,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	ContainerPath string   `protobuf:"bytes,2,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	Options       []string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Bind) Reset() {
	*x = Bind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bind) ProtoMessage() {}

func (x *Bind) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bind.ProtoReflect.Descriptor instead.
func (*Bind) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{1}
}

func (x *Bind) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Bind) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *Bind) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image            string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Rootfs           string            `protobuf:"bytes,11,opt,name=rootfs,proto3" json:"rootfs,omitempty"`
	SetupCommand     []string          `protobuf:"bytes,2,rep,name=setup_command,json=setupCommand,proto3" json:"setup_command,omitempty"`
	SetupEnvironment map[string]string `protobuf:"bytes,3,rep,name=setup_environment,json=setupEnvironment,proto3" json:"setup_environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PortForward      *Labels           `protobuf:"bytes,4,opt,name=port_forward,json=portForward,proto3" json:"port_forward,omitempty"`
	// Containers with stable names preserve their root filesystems
	// across restarts. Stable names are unique.
	StableName string        `protobuf:"bytes,5,opt,name=stable_name,json=stableName,proto3" json:"stable_name,omitempty"`
	Networks   []*ResourceId `protobuf:"bytes,6,rep,name=networks,proto3" json:"networks,omitempty"`
	User       *User         `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Binds      []*Bind       `protobuf:"bytes,8,rep,name=binds,proto3" json:"binds,omitempty"`
	Hostname   string        `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	StableId   string        `protobuf:"bytes,10,opt,name=stable_id,json=stableId,proto3" json:"stable_id,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{2}
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetRootfs() string {
	if x != nil {
		return x.Rootfs
	}
	return ""
}

func (x *Container) GetSetupCommand() []string {
	if x != nil {
		return x.SetupCommand
	}
	return nil
}

func (x *Container) GetSetupEnvironment() map[string]string {
	if x != nil {
		return x.SetupEnvironment
	}
	return nil
}

func (x *Container) GetPortForward() *Labels {
	if x != nil {
		return x.PortForward
	}
	return nil
}

func (x *Container) GetStableName() string {
	if x != nil {
		return x.StableName
	}
	return ""
}

func (x *Container) GetNetworks() []*ResourceId {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Container) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Container) GetBinds() []*Bind {
	if x != nil {
		return x.Binds
	}
	return nil
}

func (x *Container) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Container) GetStableId() string {
	if x != nil {
		return x.StableId
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *IPAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Target      *IPAddress `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{3}
}

func (x *Route) GetDestination() *IPAddress {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Route) GetTarget() *IPAddress {
	if x != nil {
		return x.Target
	}
	return nil
}

type IPNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4Block   *IPAddress          `protobuf:"bytes,2,opt,name=ipv4_block,json=ipv4Block,proto3" json:"ipv4_block,omitempty"`
	Ipv6Block   *IPAddress          `protobuf:"bytes,3,opt,name=ipv6_block,json=ipv6Block,proto3" json:"ipv6_block,omitempty"`
	Ipv4Gateway *IPAddress          `protobuf:"bytes,4,opt,name=ipv4_gateway,json=ipv4Gateway,proto3" json:"ipv4_gateway,omitempty"`
	Ipv6Gateway *IPAddress          `protobuf:"bytes,5,opt,name=ipv6_gateway,json=ipv6Gateway,proto3" json:"ipv6_gateway,omitempty"`
	Data        *IPNetwork_LiveData `protobuf:"bytes,50,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IPNetwork) Reset() {
	*x = IPNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetwork) ProtoMessage() {}

func (x *IPNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNetwork.ProtoReflect.Descriptor instead.
func (*IPNetwork) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{4}
}

func (x *IPNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IPNetwork) GetIpv4Block() *IPAddress {
	if x != nil {
		return x.Ipv4Block
	}
	return nil
}

func (x *IPNetwork) GetIpv6Block() *IPAddress {
	if x != nil {
		return x.Ipv6Block
	}
	return nil
}

func (x *IPNetwork) GetIpv4Gateway() *IPAddress {
	if x != nil {
		return x.Ipv4Gateway
	}
	return nil
}

func (x *IPNetwork) GetIpv6Gateway() *IPAddress {
	if x != nil {
		return x.Ipv6Gateway
	}
	return nil
}

func (x *IPNetwork) GetData() *IPNetwork_LiveData {
	if x != nil {
		return x.Data
	}
	return nil
}

type IPNetwork_LiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocated map[string]*ResourceId `protobuf:"bytes,2,rep,name=allocated,proto3" json:"allocated,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IPNetwork_LiveData) Reset() {
	*x = IPNetwork_LiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_containers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNetwork_LiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetwork_LiveData) ProtoMessage() {}

func (x *IPNetwork_LiveData) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNetwork_LiveData.ProtoReflect.Descriptor instead.
func (*IPNetwork_LiveData) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{4, 0}
}

func (x *IPNetwork_LiveData) GetAllocated() map[string]*ResourceId {
	if x != nil {
		return x.Allocated
	}
	return nil
}

var File_containers_proto protoreflect.FileDescriptor

var file_containers_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73,
	0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x1a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x22, 0x64, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd1, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x74, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x74, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37,
	0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62,
	0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61,
	0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37,
	0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x69, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c,
	0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a,
	0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xbe, 0x04, 0x0a, 0x09, 0x49, 0x50, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x41, 0x0a,
	0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73,
	0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x45, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62,
	0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xc7, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65,
	0x2e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x61, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x6c, 0x61, 0x62, 0x34, 0x37, 0x2e, 0x69, 0x73, 0x6c, 0x65, 0x2e, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x19, 0x5a, 0x17, 0x6c, 0x61, 0x62,
	0x34, 0x37, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x69, 0x73, 0x6c, 0x65, 0x2f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_containers_proto_rawDescOnce sync.Once
	file_containers_proto_rawDescData = file_containers_proto_rawDesc
)

func file_containers_proto_rawDescGZIP() []byte {
	file_containers_proto_rawDescOnce.Do(func() {
		file_containers_proto_rawDescData = protoimpl.X.CompressGZIP(file_containers_proto_rawDescData)
	})
	return file_containers_proto_rawDescData
}

var file_containers_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_containers_proto_goTypes = []interface{}{
	(*User)(nil),               // 0: dev.lab47.isle.guestapi.User
	(*Bind)(nil),               // 1: dev.lab47.isle.guestapi.Bind
	(*Container)(nil),          // 2: dev.lab47.isle.guestapi.Container
	(*Route)(nil),              // 3: dev.lab47.isle.guestapi.Route
	(*IPNetwork)(nil),          // 4: dev.lab47.isle.guestapi.IPNetwork
	nil,                        // 5: dev.lab47.isle.guestapi.Container.SetupEnvironmentEntry
	(*IPNetwork_LiveData)(nil), // 6: dev.lab47.isle.guestapi.IPNetwork.LiveData
	nil,                        // 7: dev.lab47.isle.guestapi.IPNetwork.LiveData.AllocatedEntry
	(*Labels)(nil),             // 8: dev.lab47.isle.guestapi.Labels
	(*ResourceId)(nil),         // 9: dev.lab47.isle.guestapi.ResourceId
	(*IPAddress)(nil),          // 10: dev.lab47.isle.guestapi.IPAddress
}
var file_containers_proto_depIdxs = []int32{
	5,  // 0: dev.lab47.isle.guestapi.Container.setup_environment:type_name -> dev.lab47.isle.guestapi.Container.SetupEnvironmentEntry
	8,  // 1: dev.lab47.isle.guestapi.Container.port_forward:type_name -> dev.lab47.isle.guestapi.Labels
	9,  // 2: dev.lab47.isle.guestapi.Container.networks:type_name -> dev.lab47.isle.guestapi.ResourceId
	0,  // 3: dev.lab47.isle.guestapi.Container.user:type_name -> dev.lab47.isle.guestapi.User
	1,  // 4: dev.lab47.isle.guestapi.Container.binds:type_name -> dev.lab47.isle.guestapi.Bind
	10, // 5: dev.lab47.isle.guestapi.Route.destination:type_name -> dev.lab47.isle.guestapi.IPAddress
	10, // 6: dev.lab47.isle.guestapi.Route.target:type_name -> dev.lab47.isle.guestapi.IPAddress
	10, // 7: dev.lab47.isle.guestapi.IPNetwork.ipv4_block:type_name -> dev.lab47.isle.guestapi.IPAddress
	10, // 8: dev.lab47.isle.guestapi.IPNetwork.ipv6_block:type_name -> dev.lab47.isle.guestapi.IPAddress
	10, // 9: dev.lab47.isle.guestapi.IPNetwork.ipv4_gateway:type_name -> dev.lab47.isle.guestapi.IPAddress
	10, // 10: dev.lab47.isle.guestapi.IPNetwork.ipv6_gateway:type_name -> dev.lab47.isle.guestapi.IPAddress
	6,  // 11: dev.lab47.isle.guestapi.IPNetwork.data:type_name -> dev.lab47.isle.guestapi.IPNetwork.LiveData
	7,  // 12: dev.lab47.isle.guestapi.IPNetwork.LiveData.allocated:type_name -> dev.lab47.isle.guestapi.IPNetwork.LiveData.AllocatedEntry
	9,  // 13: dev.lab47.isle.guestapi.IPNetwork.LiveData.AllocatedEntry.value:type_name -> dev.lab47.isle.guestapi.ResourceId
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_containers_proto_init() }
func file_containers_proto_init() {
	if File_containers_proto != nil {
		return
	}
	file_resources_proto_init()
	file_labels_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_containers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_containers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNetwork_LiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_containers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_containers_proto_goTypes,
		DependencyIndexes: file_containers_proto_depIdxs,
		MessageInfos:      file_containers_proto_msgTypes,
	}.Build()
	File_containers_proto = out.File
	file_containers_proto_rawDesc = nil
	file_containers_proto_goTypes = nil
	file_containers_proto_depIdxs = nil
}
