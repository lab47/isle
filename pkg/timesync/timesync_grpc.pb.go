// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: timesync.proto

package timesync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeSyncClient is the client API for TimeSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSyncClient interface {
	TimeSync(ctx context.Context, opts ...grpc.CallOption) (TimeSync_TimeSyncClient, error)
}

type timeSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSyncClient(cc grpc.ClientConnInterface) TimeSyncClient {
	return &timeSyncClient{cc}
}

func (c *timeSyncClient) TimeSync(ctx context.Context, opts ...grpc.CallOption) (TimeSync_TimeSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeSync_ServiceDesc.Streams[0], "/dev.lab47.isle.timesync.TimeSync/TimeSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeSyncTimeSyncClient{stream}
	return x, nil
}

type TimeSync_TimeSyncClient interface {
	Send(*NTPTimePacket) error
	Recv() (*NTPTimePacket, error)
	grpc.ClientStream
}

type timeSyncTimeSyncClient struct {
	grpc.ClientStream
}

func (x *timeSyncTimeSyncClient) Send(m *NTPTimePacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeSyncTimeSyncClient) Recv() (*NTPTimePacket, error) {
	m := new(NTPTimePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeSyncServer is the server API for TimeSync service.
// All implementations must embed UnimplementedTimeSyncServer
// for forward compatibility
type TimeSyncServer interface {
	TimeSync(TimeSync_TimeSyncServer) error
	mustEmbedUnimplementedTimeSyncServer()
}

// UnimplementedTimeSyncServer must be embedded to have forward compatible implementations.
type UnimplementedTimeSyncServer struct {
}

func (UnimplementedTimeSyncServer) TimeSync(TimeSync_TimeSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method TimeSync not implemented")
}
func (UnimplementedTimeSyncServer) mustEmbedUnimplementedTimeSyncServer() {}

// UnsafeTimeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSyncServer will
// result in compilation errors.
type UnsafeTimeSyncServer interface {
	mustEmbedUnimplementedTimeSyncServer()
}

func RegisterTimeSyncServer(s grpc.ServiceRegistrar, srv TimeSyncServer) {
	s.RegisterService(&TimeSync_ServiceDesc, srv)
}

func _TimeSync_TimeSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeSyncServer).TimeSync(&timeSyncTimeSyncServer{stream})
}

type TimeSync_TimeSyncServer interface {
	Send(*NTPTimePacket) error
	Recv() (*NTPTimePacket, error)
	grpc.ServerStream
}

type timeSyncTimeSyncServer struct {
	grpc.ServerStream
}

func (x *timeSyncTimeSyncServer) Send(m *NTPTimePacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeSyncTimeSyncServer) Recv() (*NTPTimePacket, error) {
	m := new(NTPTimePacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeSync_ServiceDesc is the grpc.ServiceDesc for TimeSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.lab47.isle.timesync.TimeSync",
	HandlerType: (*TimeSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TimeSync",
			Handler:       _TimeSync_TimeSync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "timesync.proto",
}
